pipeline {
    agent any

    environment {
        SONARQUBE_SERVER = 'SonarQube'
        SONAR_PROJECT_KEY = 'prudhvi-boot'
        ECR_REPO_URI = '448049787674.dkr.ecr.us-west-1.amazonaws.com/prudhvi-boot'
        AWS_REGION = 'us-west-1'
        TRIVY_IMAGE = 'aquasec/trivy:latest'
        PROJECT_DIR = 'pddr-dev/prudhvi-boot'
        RECIPIENT_EMAIL = 'nandhuraj0303@gmail.com'
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                git branch: 'main', 
                    url: 'https://github.com/Prudhvidharraj/project-root.git'
            }
        }

        stage('Build & Test') {
            steps {
                dir(env.PROJECT_DIR) {
                    sh 'mvn clean install -DskipTests=true'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir(env.PROJECT_DIR) {
                    withSonarQubeEnv(env.SONARQUBE_SERVER) {
                        sh """
                        mvn sonar:sonar \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.projectName=${SONAR_PROJECT_KEY} \
                        -Dsonar.host.url=http://54.183.40.137:9000 \
                        -Dsonar.projectVersion=${BUILD_NUMBER}
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir(env.PROJECT_DIR) {
                    script {
                        docker.build("${ECR_REPO_URI}:${BUILD_NUMBER}")
                    }
                }
            }
        }

        stage('Trivy Scan') {
            steps {
                script {
                    sh """
                    docker run --rm \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    ${TRIVY_IMAGE} \
                    --exit-code 1 \
                    --severity HIGH,CRITICAL \
                    --no-progress \
                    ${ECR_REPO_URI}:${BUILD_NUMBER}
                    """
                }
            }
        }

        stage('Login to ECR') {
            steps {
                withAWS(region: env.AWS_REGION, credentials: 'aws-credentials') {
                    script {
                        sh """
                        aws ecr get-login-password --region ${AWS_REGION} | \
                        docker login --username AWS --password-stdin ${ECR_REPO_URI}
                        """
                    }
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    docker.withRegistry("https://${ECR_REPO_URI}", 'ecr:us-west-1:aws-credentials') {
                        docker.image("${ECR_REPO_URI}:${BUILD_NUMBER}").push()
                        docker.image("${ECR_REPO_URI}:latest").push()
                    }
                }
            }
        }
    }

    post {
        always {
            sh 'docker system prune -f --all'
            cleanWs()
        }
        success {
            emailext(
                subject: "SUCCESS: Pipeline '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """
                <p>SUCCESS: Pipeline '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                <p>Check console output at: <a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>
                <p>ECR Image: ${ECR_REPO_URI}:${BUILD_NUMBER}</p>
                """,
                to: env.RECIPIENT_EMAIL,
                mimeType: 'text/html'
            )
        }
        failure {
            emailext(
                subject: "FAILED: Pipeline '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """
                <p>FAILED: Pipeline '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                <p>Check console output at: <a href="${env.BUILD_URL}">${env.JOB_NAME} [${env.BUILD_NUMBER}]</a></p>
                <p>Error details in attached build log</p>
                """,
                to: env.RECIPIENT_EMAIL,
                mimeType: 'text/html',
                attachLog: true
            )
            archiveArtifacts artifacts: '**/target/*.log', allowEmptyArchive: true
        }
    }
}
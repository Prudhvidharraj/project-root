pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds')
    }

    stages {
        stage('Build') {
            steps {
                checkout scm
                sh 'mvn clean compile'
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        stage('Package') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds') {
                        def image = docker.build("your-dockerhub-username/my-java-app:${env.BUILD_ID}")
                        image.push()
                        image.push('latest')
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    sshagent(['ssh-server-creds']) {
                        sh '''
                            ssh -o StrictHostKeyChecking=no user@remote-server-ip \
                            "docker pull your-dockerhub-username/my-java-app:latest && \
                            docker stop my-java-app || true && \
                            docker rm my-java-app || true && \
                            docker run -d -p 8080:8080 --name my-java-app your-dockerhub-username/my-java-app:latest"
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            slackSend(color: '#00FF00', message: "Build Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
        failure {
            slackSend(color: '#FF0000', message: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
    }
}